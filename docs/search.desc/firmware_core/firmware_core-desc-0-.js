searchState.loadedDescShard("firmware_core", 0, "This crate\nA module for managing a 3D printer’s components, …\nThis module provides various utility functions and types …\nErrors that may occur during the creation of a <code>Printer3D</code>.\nA structure representing a 3D printer.\nErrors that may occur during the ticking process of a …\nThis module contains everything related to making the 3D …\nThis module contains all the components necessary for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>Printer3D</code>.\nA module for handling panic events in the firmware.\nUpdates the printer state, feeding the watchdog if present.\nA struct for managing communication with external entities.\nConfiguration settings for the communication module.\nContains peripherals required for the communication thread.\nContains peripherals required for the components thread.\nErrors that may occur during the creation of the …\nAn error related to the file system.\nAn error related to the HTTP server.\nManages multi-threaded communication for the 3D printer.\nA peripheral from the provided ones is missing (<code>name</code> is …\nAn error occurred during the print process tick operation.\nAn error related to security configuration.\nAn error occurred while sending a command.\nRepresents peripherals that can be sent between threads.\nErrors that may occur during the tick operation of the …\nAn error related to the WiFi communicator.\nAn error occurred while registering WiFi requests.\nThis module handles the communication between the …\nDelay duration between communication ticks.\nConfiguration settings for the file system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a reference to the join handle of the …\nThis module provides functionalities for handling HTTP …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of commands that can be buffered before …\nStarts a new thread for communication and executes the <code>tick</code>…\nCreates a new <code>Communication</code> instance with the specified …\nConstructs a <code>SendablePeripherals</code> instance for the …\nConstructs a <code>SendablePeripherals</code> instance for the …\nThis module provides functionality for Over-The-Air (OTA) …\nThis module provides security functionality for …\nSecurity configuration settings.\nExecutes all commands received from the communication …\nExecutes periodic tasks for the communication module.\nConfiguration settings for the WiFi connection.\nADC for reading sensor values.\nHeater and thermistor pins for the bed and hotend.\nFlash chip for memory operations.\nSPI interface for the flash chip.\nFan control pins.\nMotor control pins for various axes.\nOTA (Over-the-Air) update interface.\nHTTP server for handling requests.\nSystem time for managing delays.\nUART driver for serial communication.\nWiFi driver for connectivity.\nEndstop sensors for the axes.\nA type that implements this trait can be used to make the …\nThe type of error that can occur during communication.\nRegisters handlers for all possible HTTP requests …\nRegisters a handler for a specific HTTP request.\nThis module provides the functionality for WiFi …\nA problem occurred when calling <code>Wifi::connect</code>.\nConfiguration required to create a <code>WifiCommunicator</code>.\nAn error returned from <code>WifiCommunicator::new</code>.\nA type that represents any error that can occur while …\nA trait that defines the behavior of an HTTP server in the …\nA problem occurred when calling <code>Wifi::set_configuration</code>.\nA problem occurred when calling <code>Wifi::start</code>.\nA way to communicate with the external world using WiFi.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the WiFi driver.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets up the provided <code>wifi</code> to work as a client based on the …\nRegisters a request with the server.\nConfiguration of the WiFi client.\nThis module contains functionalities used to make the …\nThis module defines the possible HTTP requests that the …\nThis module defines a container for shared resources used …\nA command sent from the <code>Communication</code> thread to the …\nList of <code>commands</code> received from the <code>communication thread</code> …\nThe communication thread can send <code>commands</code> to the …\nExecutes the command on the provided components.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that will consume all the commands …\nReturns a <code>CommandsSender</code> and a <code>CommandsReceiver</code> linked …\nSend the provided <code>command</code> to the linked <code>CommandsReceiver</code>.\nThis struct keeps track of the G-code commands executed by …\nAdd the provided <code>lines</code> to the history of commands. You can …\nReturns the argument unchanged.\nReturns a string containing the <code>lines</code> you provided to …\nCalls <code>U::from(self)</code>.\nReturns an empty <code>GCodeHistory</code>.\nA “screenshot” of the state of some components of the …\nReturns the argument unchanged.\nReturns the static <code>PrinterState</code> instance that contains the …\nCalls <code>U::from(self)</code>.\nUpdates the “screenshot” of the state of some …\nDelete a specific file from the file system.\nGet the status of the current print (if a print is in …\nA possible request that the HTTP server in this firmware …\nAn iterator over the variants of HttpRequest\nList the metadatas of all the G-code files saved in the …\nProvide the history of G-code commands that have been read …\nMoves the tool of the machine by the specified amount on …\nOver-The-Air update.\nPause or resume (based on the previous state) the current …\nStart printing a specific file.\nGet the status of various components of the machine (like …\nSend a G-code file to the printer (that later on could be …\n“Manually” add the provided G-code commands to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a pointer to the function that should be called …\nReturns the HTTP method that the request received by the …\nReturns the relative URI that the request received by the …\nReturns the number of possible URI the HTTP server of this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA container of resources that can be used by the <code>callbacks</code> …\nCheck <code>Resources</code>.\nMakes a clone of the <code>Arc</code> pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBlocks the thread until the mutex is unlocked and returns …\nWraps the provided resources in an <code>Arc&lt;Mutex&gt;&gt;</code> and returns …\nTry to get the internal resources, returning <code>None</code> if they …\nError occurred during writing to the OTA.\nA firmware update <code>started</code> by the <code>OverTheAirUpdater</code>.\nErrors that can occur during the OTA update writing …\nStruct that manages OTA updates for the firmware.\nMore bytes were written than the update size.\nStates to the firmware that the OTA update you started …\nStates to the firmware that the OTA update you started …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitiates an OTA update.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if an OTA update has been initiated and completed.\nCreates a new instance of <code>OverTheAirUpdater</code>.\nReboots the microcontroller.\nWrites a new portion of data to the OTA partition. After …\nConfiguration settings for the <code>Security</code> struct.\nPossible errors that can occur during the creation of …\nA trait for retrieving the IP address from a request.\nRepresents an IP address as a 32-bit unsigned integer.\nDifferent configurations for password protection.\nA trait that defines a layer of security for communication …\nInput data required by <code>Protection</code> to verify the validity …\nA struct that encapsulates security mechanisms, including …\nChecks if the input passes the protection criteria.\nValidates the request against the security criteria.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates input data from an HTTP request and resources.\nGenerates an <code>IpAddress</code> from an HTTP request and the …\nReturns the IP address associated with the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Security</code> instance with the specified …\nA type for handling analog-to-digital conversion.\nA type representing the PWM pin for the cartridge heater.\nAn error that can occur when you instatiate a …\nThe output pin used to control the extruder motor’s …\nThe output pin used to control the extruder motor’s …\nA type representing the PWM pin for the fan.\nA type representing a flash memory chip.\nA type for interfacing with a SPI flash memory chip.\nA type for reading the heated bed thermistor value.\nA type representing the PWM pin for the heated bed.\nA type for reading the hotend thermistor value.\nA type representing the kinematic model of the printer.\nThe output pin used to control the left motor’s …\nThe output pin used to control the left motor’s stepping.\nA type for handling over-the-air updates.\nA peripheral from the provided ones is missing (<code>name</code> is …\nA type that implements this trait contains all the …\nThis struct encapsulates all the elements required to make …\nThe output pin used to control the right motor’s …\nThe output pin used to control the right motor’s …\nA type for managing an HTTP server.\nA type for representing errors from the server.\nA timer used for controlling stepper motors.\nA type for system time management.\nAn error that can occur when you tick a <code>Printer3DComponents</code>…\nA type for handling UART communication.\nA type implementing a watchdog timer creator.\nA type for handling WiFi connections.\nThe type for the X-axis endstop.\nThe type for the Y-axis endstop.\nThe output pin used to control the Z-axis motor’s …\nThe type for the Z-axis endstop.\nThe output pin used to control the Z-axis motor’s …\nConfiguration module for printer components.\nThis module contains implementations for various drivers …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<strong>G-code</strong> is the language understood by 3D printers, and it’…\nA function pointer to retrieve the IP address from the …\nHardware Abstraction Layer (HAL) module.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module provides mock implementations for each trait …\nThis module is responsible for managing all aspects of …\nCreates a new instance of <code>Printer3DComponents</code>.\nThis module gives the ability to the printer to pause a …\nThis module manages the process of printing files by …\nReturns a function pointer that reboots the …\nAttempts to take the ADC peripheral. Returns <code>None</code> if the …\nAttempts to take the heated bed cartridge heater pin. …\nAttempts to take the heated bed thermistor pin. Returns …\nAttempts to take the extruder motor direction pin. Returns …\nAttempts to take the extruder motor step pin. Returns <code>None</code> …\nAttempts to take the flash chip peripheral. Returns <code>None</code> …\nAttempts to take the SPI flash peripheral. Returns <code>None</code> if …\nAttempts to take the hotend cartridge heater pin. Returns …\nAttempts to take the hotend fan pin. Returns <code>None</code> if the …\nAttempts to take the hotend thermistor pin. Returns <code>None</code> …\nAttempts to take the HTTP server. Returns <code>None</code> if the …\nAttempts to take the kinematics peripheral. Returns <code>None</code> …\nAttempts to take the layer fan pin. Returns <code>None</code> if the …\nAttempts to take the left motor direction pin. Returns <code>None</code>…\nAttempts to take the left motor step pin. Returns <code>None</code> if …\nAttempts to take the OTA update handler. Returns <code>None</code> if …\nAttempts to take the right motor direction pin. Returns …\nAttempts to take the right motor step pin. Returns <code>None</code> if …\nAttempts to take the stepper ticker timer peripheral. …\nAttempts to take the system time peripheral. Returns <code>None</code> …\nAttempts to take the UART driver. Returns <code>None</code> if the …\nAttempts to take the watchdog creator peripheral. Returns …\nAttempts to take the WiFi driver. Returns <code>None</code> if the …\nAttempts to take the X-axis endstop. Returns <code>None</code> if the …\nAttempts to take the Y-axis endstop. Returns <code>None</code> if the …\nAttempts to take the Z-axis endstop. Returns <code>None</code> if the …\nAttempts to take the Z-axis motor direction pin. Returns …\nAttempts to take the Z-axis motor step pin. Returns <code>None</code> …\nA module for managing temperature control in the 3D …\nUpdates the state of the printer components, performing …\nA module for managing time in the printer.\nHolds configurations for different components.\nReturns the argument unchanged.\nPID settings for the heated bed.\nMinimum duty cycle to activate the hotend fan.\nPID settings for the hotend.\nCalls <code>U::from(self)</code>.\nMinimum duty cycle to activate the layer fan.\nConfiguration settings for the motion controller.\nTemperature-related configurations.\nPID configuration for temperature control.\nSafety configuration for temperature control.\nConfiguration settings for the thermistor.\nThe allowed temperature range for safe operation.\nThe beta value of the thermistor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for maintaining the target temperature.\nThe resistance of the other resistor in the voltage …\nThe PID gains for temperature control.\nThe resistance at the reference temperature (T0).\nConfiguration for rising to the target temperature.\nNumber of samples to consider when rising to target …\nSafety configurations for temperature control.\nConfiguration settings for the thermistor.\nThis module provides the implementation for the BLTouch …\nThis module provides the implementation for a button …\nThis module provides the implementation for a cartridge …\nThis module provides the implementation for a fan …\nThis module provides the implementation for controlling a …\nThis module provides an interface for interacting with SPI …\nThis module provides an interface for controlling stepper …\nThis module provides an interface for reading temperatures …\nEventually exits from <code>alarm mode</code> and <code>pulls pin up</code>.\nEventually exits from <code>alarm mode</code> and enters touch switch …\nA <code>BLTouch</code> sensor.\nA command <code>executable</code> by the BLTouch sensor.\nPush pin down.\nDo self test (pushes pin down and up a couple of times).\nPull pin up.\n<code>Pulls pin up</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>BLTouch</code> with the specified …\nEquivalent to <code>BLTouch::on_touch</code>.\nCalls the provided <code>callback</code> when the BLTouch touches …\n<code>Pushes pin down</code> and goes in <code>touch switch mode</code>.\nMakes the BLTouch sensor execute the provided <code>command</code>.\nA button connected to the microcontroller that can read if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>Ok(true)</code> if the button is pressed, <code>Ok(false)</code> if it …\nReturns a <code>Button</code> that can read its state on the provided …\nEquivalent to <code>Button::on_pressed</code>, even for safety rules.\nCall the provided <code>callback</code> function when the button is …\nA cartridge heater connected to the microcontroller that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new <code>CartridgeHeater</code> that can control its heat …\nSets the <code>percentage</code> of current to give to the heater.\nA fan connected to the microcontroller that can be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a <code>Fan</code> that can control its speed through the …\nSets the speed percentage at which the fan rotates.\nThe neutral angle a <code>ServoMotor</code> holds (<code>90°</code>).\nThe <code>50Hz</code> value usually used by servo motors.\nA <code>servo motor</code> connected to the microcontroller that can be …\nPosition held by a <code>ServoMotor</code>.\nReturns the <code>Angle</code> this <code>ServoPosition</code> represents.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>ServoPosition</code> representing the provided <code>angle</code>.\nCreates a <code>ServoPosition</code> that has the provided …\nGets the <code>target position</code> you previously <code>set</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSends a command to the servo motor to move to the provided …\nCreates a <code>ServoMotor</code> that receives commands on the …\nNumber of blocks contained in a plane of the chip.\nSize of the data area of a block.\nSize of the data area of a block.\nBoth the <code>Manufacturer ID</code> and the <code>Device ID</code> read from the …\nIt has been impossible to communicate via SPI and so no …\nOnly the <code>Device ID</code> read from the SPI device doesn’t …\nThe register of a feature in the <code>MT29F2G01ABAGDWB</code> chip.\nA type that represents a <code>flash memory chip</code>.\nExtra functionality provided automatically to every type …\nNumber of LUNs contained in the chip.\nSize of the data area of a LUN.\nSize of the data area of a LUN.\nMax supported frequency of the SPI clock.\nSize of the data area of the chip.\nSize of the data area of the chip.\n2Gbit 3.3V NAND SPI flash memory chip (datasheet).\nOnly the <code>Manufacturer ID</code> read from the SPI device doesn’…\nNumber of pages contained in a block of the chip.\nSize of the ECC area of a page.\nSize of the data area of a page.\nNumber of planes contained in a LUN of the chip.\nSize of the data area of a plane.\nSize of the data area of a plane.\nPreferred <code>SPI mode</code>.\nA flash memory connected to the microcontroller through a …\nAn error returned from <code>SpiFlashMemory::validate_id</code>.\nReturns the address of the register.\nCheck if the block at the provided <code>block_index</code> in the …\nErases all the blocks in the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the memory address of the first byte of the first …\nReturns the memory address of the first byte of the first …\nReturns the index of the block that contains the provided …\nReturns the index of the block that contains the provided …\nReturns a mutable reference to the underlying chip.\nReturns the value stored in the provided <code>features</code> register …\nMoves the bytes in the <code>from</code> address range to the address …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProgram the provided <code>data</code> in the flash memory starting …\nReads [<code>data.len()</code>] bytes from the data areas of the pages …\nReads [<code>data.len()</code>] bytes from the ECC area of the page …\nPuts the flash memory in a known condition.\nSets the value stored in the provided <code>features</code> register of …\nValidate that the IDs (<code>ManufacturerID</code> and <code>DeviceID</code>) of the …\nCounter-clockwise\nClockwise\nDirection of rotation.\nA <code>stepper motor</code> connected to a <code>stepper driver</code> (like the …\nCheck <code>struct&#39;s documentation</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>RotationalDirection::CW</code> if the provided <code>value</code> has …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>StepperMotor</code> that can be controlled with the …\nReturns <code>RotationalDirection::CW</code> if <code>self</code> is …\nSet the direction in which the step will be taken when you …\nCheck <code>struct&#39;s documentation</code>.\n<code>1</code> microstep corresponds to a step.\n<code>128</code> microsteps correspond to a step.\n<code>16</code> microsteps correspond to a step.\n<code>2</code> microsteps correspond to a step.\n<code>256</code> microsteps correspond to a step.\n<code>32</code> microsteps correspond to a step.\n<code>4</code> microsteps correspond to a step.\n<code>64</code> microsteps correspond to a step.\n<code>8</code> microsteps correspond to a step.\nMaximum microstep resolution achievable by the TMC2209 …\nAmount of <code>microsteps</code> the motor will require to do a full …\nError that occurred while trying to read a register of the …\nA driver to communicate with the <code>TMC2209</code> chip (to control …\nSerial address of a <code>TMC2209</code> chip.\nReturns the number of microsteps with the highest …\nReturns the number of microsteps per step this instance …\nDisable the TMC2209 via software (UART).\nBlocking\nDisable automatic current control.\nStops the automatic adjustment of the PWM gradient value …\nDisable the microstep interpolation. Check …\nDisable <code>StealthChop</code> on the driver, enabling <code>SpreadCycle</code>.\nEnable the TMC2209 via software (UART).\nBlocking\nEnable automatic current control.\nMakes the TMC2209 chip automatically adjust the PWM …\nThe TMC2209 chip will extrapolate the microsteps per step …\nEnable <code>StealthChop</code> on the driver, disabling <code>SpreadCycle</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>UARTAddress</code> from the state of the <code>MS1</code> and <code>MS2</code> …\nGet the value you previously set using …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>TMC2209</code> driver that is connected controlled by …\nRead the state of a physical pin of the TMC2209 chip using …\nScales the current going to the motors.\nSets the amount of <code>microsteps</code> the motor will take for each …\nThe <code>25°C</code> temperature.\nA thermistor …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a <code>Thermistor</code> that is connected to the …\nReads the current <code>Temperature</code> from the thermistor.\nIt has been impossible to erase the data portion of the …\nIt has been impossible to erase the metadata portion of …\nAn error returned from <code>FileSystem::new</code>.\nAn error returned from <code>FileSystem::delete_file</code>.\nThe file you tried to delete doesn’t exist in the file …\nCreates a file with the name <code>file_name</code> and whose data will …\nTries to delete the file with the provided <code>file_id</code> from …\nReturns <code>true</code> if you <code>created</code> a file before that had the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a slice of all the metadatas of all the files you …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpens the file with the provided <code>file_id</code> so that you can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRestores the bad block table from a previous one you …\nCreates a bad block table from the first power up of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration data of the regions of the <code>FileSystem</code>.\nReturns the memory address range used by the <code>FilesRegion</code>.\nThe range of the indices of the flash memory’s blocks …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the memory address range used by the …\nThe range of the indices of the flash memory’s blocks …\nThe file has been deleted from the file system.\nAll the content of the file has been read and there’s …\nThere are 2 assumptions used in all the methods of this …\nAn error during the communication with the flash memory …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if you have <code>read</code> all the data present in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>data.len()</code> bytes from the file at the current …\nReads the <code>file_name</code> you provided to <code>FileSystem::create_file</code>…\n<code>FileId</code> of the first file ever created in the file system.\nUnique identifier of a file for a 3D printer. 2 files on …\n<code>FileId</code> of a file that is currently being written. A newly …\nCollect all the fragmented data holes present in the …\nFinds a space large enough to store <code>data_size</code> bytes …\nRemoves the file with the specified <code>file_id</code> from the …\nReturns <code>true</code> if a file with the specified <code>file_id</code> is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nIf a file with the specified <code>file_id</code> is stored in this …\nReturns the current file validator.\nReturns a reference to the metadatas of all the files …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads the metadatas region you previously <code>stored</code> from the …\nStores this region in the provided <code>spi_flash_memory</code> at the …\nThis trait is only used for testing purposes, and it’s …\nThere has been an error in the execution of the command.\nThe command has finished processing successfully.\nStatus of execution (or preparation) of a <code>G-code command</code>.\nThe command still needs to be processed.\nA list of all the G-code commands supported by this …\nThis method is called when the G-code command becomes the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>G-code commands</code> can have 0, 1, or more parameters. Each …\nThis module contains utilities to convert strings (which …\nThis method is called as soon as the G-code command is …\nTODO: Find a way to get the current position (because now …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalling <code>GCodeCommand::execute</code> resulted in the <code>Status::Error</code>…\nCalling <code>GCodeCommand::prepare</code> resulted in the <code>Status::Error</code>…\nNumber of savable positions in <code>GCodeExecuter</code> (check …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the position you provided to <code>Self::save_position</code> at …\nReturns <code>true</code> if it is currently executing a command or it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSave the provided <code>position</code> at the specified <code>slot</code>, so that …\nA parameter of a G-code command.\nReturns the argument unchanged.\nA list of all the identifiers in the parameters of a …\nCalls <code>U::from(self)</code>.\nA list of all the values in the parameters of a command …\nA list of identifiers that could be present in the string …\nLetter <code>E</code>.\nLetter <code>F</code>.\nAn identifier supported by this firmware.\nA <code>GCodeParameterIdentifier</code> which is a single letter (like <code>X</code>…\nUsed by <code>AnyWithoutSpaces</code>.\nLetter <code>P</code>.\nLetter <code>R</code>.\nLetter <code>S</code>.\nLetter <code>X</code>.\nLetter <code>Y</code>.\nLetter <code>Z</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if any of the identifiers in contained in the …\nReturns <code>true</code> if the identifier of type <code>I</code> is present in the …\nA type of value of a parameter supported by this firmware.\nA parameter without a value. This may be useful if you …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA line that contains only a command.\nA line that contains both a command and a comment.\nA line that contains only a comment.\nAn empty line.\nIt may either be that the line contains a command that isn…\nThis enum is the result of parsing a line using <code>GCodeParser</code>…\nCheck the <code>module&#39;s</code> documentation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a single line of G-code and returns the result.\nAnalog-to-Digital Converter (ADC) module.\nInterrupt module.\nPWM (Pulse Width Modulation) module.\nTimer module.\nUART module.\nWatchdog module.\nTrait representing an Analog-to-Digital Converter (ADC).\nTrait representing an ADC pin for a specific <code>Adc</code> type.\nExtension trait for ADC pins that provides additional …\nError indicating that the reading from the pin failed.\nThe type of error that can occur when reading from the pin.\nError indicating that the resulting percentage is invalid.\nEnum representing errors that can occur when reading a …\nThe type of value that can be read from the ADC.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the maximum readable value from the ADC.\nReads a value from the ADC pin.\nReads a value from the ADC pin and returns it as a …\nTrigger on any edge (both rising and falling) of the …\nThe type of error that can occur when subscribing to an …\nTrigger when the signal is high.\nTrait representing an interrupt-capable pin.\nTrigger when the signal is low.\nTrigger on the negative edge (falling edge) of the signal.\nTrigger on the positive edge (rising edge) of the signal.\nEnumeration representing the conditions under which an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSubscribes to an interrupt on this pin with a specified …\nThe type of error that can occur when setting the PWM …\nTrait representing a PWM-capable pin.\nGets the current duty cycle of the PWM signal.\nSets the duty cycle of the PWM signal.\nSets the frequency of the PWM signal.\nType for additional timer functionality.\nThe type of error that can occur when using the timer.\nThe type of error that can occur in the additional …\nA timer that can keep track of elapsed time and call a …\nTrait for additional timer functionality.\nConverts a <code>Duration</code> to a tick counter based on the clock …\nEnable or disable the timer based on the provided <code>enable</code> …\nReturns an instance of <code>Self::AdditionalFunctionality</code> for …\nRetrieves the current alarm as a <code>Duration</code>.\nRetrieves the current alarm value in ticks.\nReturns the frequency at which the clock of the timer is …\nGets the current time kept by the timer.\nGets the current time in ticks.\nCalls the provided <code>callback</code> every time the alarm time set …\nSets an alarm that calls the provided callback when the …\nSets an alarm in ticks.\nConverts ticks to a <code>Duration</code> based on the clock frequency.\nThe type of error that can occur while using the UART …\nA type that can be used to communicate using the …\nDiscards all the bytes in the read buffer.\nTries to read <code>buf.len()</code> bytes from the interface and …\nTries to write <code>buf</code> to the interface.\nThe type of error that can occur while feeding the …\nA type that can restart the <code>watchdog timer</code> in the …\nThe type of watchdog that this creator produces.\nA type that can instantiate a <code>Watchdog</code> on the current …\nFeeds the watchdog to reset the timer and prevent the …\nCreates a new watchdog for the current thread.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration data for stepper motors and motion control.\nAn error that can occur when you instatiate a …\nParameters required to create a <code>MotionController</code>.\nControls all the stuff (moves, homing, bed levelling..) …\nConfiguration for an individual motor.\nNumber of stepper motors controlled by the machine.\nAn helper struct used to calculate the distance taken by …\nAn error that can occur when you <code>pause or resume</code> a …\nHelpers to deal with the axes of the machine.\nBed leveling module for managing the process of leveling …\nReturns the <code>microsteps</code> count the motor would need to take …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the position of the last <code>planned move</code> if there has …\nReturns a mutable reference to the <code>TMC2209</code> driver you …\nModule for managing the homing procedure of the printer, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA module for different kinematics implementations, such as …\nMake the last <code>planned move</code> ready to be executed.\nReturns the <code>Distance</code> the object would be moved if you …\nReturns a <code>RotationToLinearMotion</code> that converts a full …\nConstructs a new <code>MotionController</code> with the provided …\nReturns a <code>RotationToLinearMotion</code> from a belt driven …\nReturns a <code>RotationToLinearMotion</code> from a lead screw …\nMake the tool move to the provided coordinates after the …\nTranslates movements (for example a <code>10mm</code> move in the <code>X</code> …\nMake the machine start the <code>HomingProcedure</code> after all the …\nThis method internally ticks the <code>HomingProcedure</code> and the …\nTicker module for managing stepper motor operations in a …\nRepresents an axis of the machine.\n<code>Extruder</code> axis.\n<code>X</code> axis.\n<code>Y</code> axis.\n<code>Z</code> axis.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDistance of the z axis probe from the bed (z axis) for …\nA probe used on the Z axis to home/do bed levelling with …\nGrid\nThe probe finished homing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of <code>offset_from_nozzle</code> you passed to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nPrepare the probe for homing.\nCentering move for the Z axis.\nIndicates that a homing move is currently being executed.\nRepresents the different stages of the homing process.\nRepresents the current state of the homing procedure.\nError during the X axis homing move.\nError during the Y axis homing move.\nError during the Z axis homing move.\nNo homing procedure is currently active.\nError while preparing the Z axis for probing.\nIndicates that the homing procedure should start.\nErrors that can occur during the homing tick process.\nHoming move for the X axis.\nHoming move for the Y axis.\nHoming move for the Z axis.\nSubmodule for handling endstop functionality, which is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a homing procedure is currently active.\nStarts the homing procedure, beginning with the X axis.\nExecutes the tick function for the homing procedure, …\nType that can be used as an <code>endstop</code>.\nA “fake” <code>Endstop</code> that is not physically present in the …\nThe endstop finished homing. Some types of endstop may not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the endstop is currently triggered or not.\nReturns a <code>ManualEndstop</code> without any callback registered.\nExecute the provided <code>callback</code> when the endstop is …\nSafety\nPrepare the endstop for homing. Some types of endstop may …\nSets the value returned by <code>Self::is_end_reached</code> to <code>false</code>.\nSets the value returned by <code>Self::is_end_reached</code> to <code>true</code>.\n“Cartesian” kinematics.\nCoreXY kinematics.\nType that represents the kinematics of the machine (i.e. …\nConverts a displacement done by the <code>a</code> and <code>b</code> motors to a …\nConverts a displacement done by the <code>a</code> and <code>b</code> motors to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a displacement on the XY coordinate system to the …\nConverts a displacement on the XY coordinate system to the …\nA bed leveling move.\nResult of a planned move. It contains all the data …\nAn homing procedure move.\nNominal speed always reached. i.e., The segment is long …\nThe planning involves calculating the most optimal speed …\nRecalculate trapezoids on entry junction (for …\nLet the main thread communicate with the ticker ISR.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>target_position</code> of the last <code>planned move</code>.\nReturns a mutable reference to the <code>Settings</code> you provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPlans a move that will make the tool move to the …\nManually sets the current position of the planner, making …\nData shared between the “main thread” and the ticker …\nFunction pointers used to convert the motion of the <code>a</code> and <code>b</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to lock the internal <code>Mutex</code> and returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there is either the current or the next …\nReturns <code>true</code> if either the current or the next block have …\nSets the <code>KinematicsFunctions</code> used by the …\nChecks if the ticker ISR requires 1 or 2 blocks and …\nAn enumeration of possible errors that can occur during …\nAn error that occurs when attempting to enable the timer …\nAn enumeration of possible errors that can occur when …\nAn error that occurs when setting the timer’s alarm …\nAn error that occurs when an endstop is triggered during …\nAn error that occurs when setting the alarm time in the …\nAttaches an interrupt to the timer you provide to <code>Self::new</code>…\nDisable the inner timer, stopping this ticker from making …\nEnable the inner timer so that the ticker can make the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the frequency of the inner timer. This represents the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Err(Timer::Error)</code> if there was an error while …\nThis function must be called each time you start homing …\nReturns <code>false</code> if you’ve never called any function in …\nMakes <code>is_paused</code> return <code>false</code>.\nMakes <code>is_paused</code> return the opposite of what it would …\nCheck <code>FileSystem::read_file</code>.\nOne of the lines read from the file is a <code>GCodeLine::Error</code>.\nThe file contains some characters that are not <code>utf-8</code>.\nContains the parsed result of a line intended for …\nThis struct controls the process of printing a file, by …\nThe call to <code>PrintProcess::tick</code> hasn’t been successful. …\nThe call to <code>PrintProcess::tick</code> has been successful, and …\nCheck <code>FileReader::read_data</code>.\nAn optional G-code command parsed from the line.\nAn optional comment associated with the G-code line.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current count of commands in the buffer.\nReturns <code>Some(FileId)</code> if a file is currently being printed …\nReturns <code>Some(duration_in_secs)</code> if a file is currently …\nReturns <code>Some(print_start_time)</code> if a file is currently …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an empty <code>PrintProcess</code>.\nReturns the command and the comment present in the …\nStarts printing the file with the provided <code>file_id_to_print</code>…\nSets the number of commands currently in the buffer.\nIf a file is currently <code>being printed</code>, calling this …\nIt has been impossible to <code>read</code> the thermistor’s …\nThe maximum limit output by the PID control. Take this in …\nThe minimum limit output by the PID control. Take this in …\nAn error that occurred when calling <code>tick</code> on a PID …\nThe thermistor’s <code>temperature</code> has been <code>read</code>, but it’s …\nIt has been impossible to <code>set</code> the cartridge heater’s …\nA <code>PID controller</code> used to control the temperature of a …\nValues of the <code>proportional</code>, <code>integral</code> and <code>derivative</code> gains …\n<code>Derivative component</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads the current <code>Temperature</code> of the PID controller.\nGets the <code>Temperature</code> read using …\nReturns the <code>PidGains</code> previously set on this PID controller.\nReturns the <code>Temperature</code> the PID controller is trying to …\n<code>Integral component</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>PidController</code> that will control the …\n<code>Proportial component</code>.\nDefines safety mechanisms to prevent overheating and …\nSet the PID gains of this controller. Check …\nSets the <code>Temperature</code> the PID controller will try to reach.\nMake the PID controller work to try to reach its …\nAfter <code>current_temperature</code> reached the <code>target_temperature</code> …\nWhile <code>current_temperature</code> is trying to reach the …\nThe <code>current_temperature</code> is outside the allowable range …\nThe <code>target_temperature</code> is outside the allowable range …\nAn enumeration of possible temperature-related errors that …\nA struct that manages safety checks for temperature …\nDefines mechanisms for checking if a temperature is within …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a set of all the errors that occurred during the …\nCreates a new <code>TemperatureSafety</code> instance with specified …\nProvides mechanisms to ensure safe temperature changes in …\nMakes sure a <code>Temperature</code> is in the allowed range you …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the provided temperature is within the allowed …\nCreates a new instance of <code>AllowedTemperatureRangeSafety</code> …\nTrait defining the behavior of protection modes for …\nConfiguration parameters for temperature change safety.\nEnsures that temperature changes are within safe limits …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe allowable fluctuation range around the target …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the current temperature is safe with respect to …\nDefines the various modes of protection for temperature …\nCreates a new instance of <code>TemperatureChangeSafety</code> with the …\nThe duration within which the temperature should stabilize.\nOnce the current temperature reaches the target …\nWhile the current temperature is trying to reach the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA clock used to keep track of the <code>SystemTime</code> and the delta …\nA clock in the microcontroller that can keep time.\nBlocks this core of the microcontroller for the provided …\nBlocks this core of the microcontroller for the provided …\nReturns the argument unchanged.\nReturns the delta time between the <code>current time</code> and the …\nReturns the amount of time this microcontroller has been …\nCalls <code>U::from(self)</code>.\nReturns a <code>Clock</code> that has just been <code>ticked</code>.\nReturns the amount of time this microcontroller has been …\nSaves the <code>current time</code> in the clock so that you can …\nA struct containing a function pointer that will be called …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>Bresenham&#39;s line algorithm</code> is used by the …\nThis module contains mathematical utilities and extensions …\nThis module provides types and functionality for various …\nConverts the provided <code>slice</code> to an array of the same type …\nImplementation of <code>Bresenham&#39;s line algorithm</code>.\nReturns the argument unchanged.\nReturns the index of the axis with the biggest distance to …\nCalls <code>U::from(self)</code>.\nCheck <code>struct&#39;s documentation</code>.\nThe <code>100%</code> value.\nExtends the functionality of numbers types (like <code>f32</code>).\nA percentage value.\nThe <code>0%</code> value.\nConstrains a value within a specified range.\nReturns the argument unchanged.\nCreates a new <code>Percentage</code> from the provided value that must …\nCreates a new <code>Percentage</code> from the provided value that must …\nCalls <code>U::from(self)</code>.\nReturns the value of the percentage in the range <code>0..=1</code>.\nReturns the value of the percentage in the range <code>0..=100</code>.\n<code>Linearly interpolates</code> between <code>range.start()</code> and <code>range.end()</code>…\nMap a value from a specified range to another range.\nReturns the square of self (<code>self * self</code>).\nThis module provides functionality for handling vectors in …\nAn N-dimensional vector with components stored as <code>Distance</code>.\nA constant representing a zero vector.\nReturns the <code>dot product</code> of this vector with <code>other</code>.\nReturns the argument unchanged.\nCreates a 2D vector from x and y components.\nCreates a 2D vector from x and y components.\nCreates a 3D vector from x, y, and z components.\nCreates a 3D vector from x, y, and z components.\nCalls <code>U::from(self)</code>.\nReturns the length of this vector in millimeters.\nReturns the square of the length of this vector in …\nThis module provides the <code>Distance</code> type for representing …\nThis module provides the <code>SmallDuration</code> struct for …\nThis module provides a representation of frequency values.\nThis module provides a representation of temperature …\nAn angle value.\nComputes the arccosine of a number. Return value is …\nReturns the number of cycles this angle has.\nReturns an <code>angle</code> from a value in degrees.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the inner angle is invalid (it could be invalid …\nGet the minimum of this and the other angle.\nReturns an <code>angle</code> from a value in radians.\nWrap the angle to range [-180°, 180°).\nWrap the angle in the [0°, 360°) range.\nA distance with a <code>10 nanometer</code> sensitivity (10^-8 meters) …\nAn enum to represent the 2 units of measurement mainly …\nReturns the number of centimeters (<code>10^-2 meters</code>) this …\nReturns the number of meters this distance represents (the …\nReturns the number of micrometers (<code>10^-6 meters</code>) this …\nReturns the number of millimeters (<code>10^-3 meters</code>) this …\nReturns the number of millimeters (<code>10^-3 meters</code>) this …\nReturns the number of tens of nanometers (<code>10^-8 meters</code>) …\nCreate a <code>Distance</code> that represents the provided <code>value</code> in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>Distance</code> from the provided centimeters (…\nReturns a <code>Distance</code> from the provided inches (…\nReturns a <code>Distance</code> from the provided micrometers (…\nReturns a <code>Distance</code> from the provided millimeters (…\nReturns a <code>Distance</code> from the provided tens of nanometers (…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>SmallDuration</code> with the highest value storable in this …\nA <code>SmallDuration</code> with a duration 1 microsecond.\nA <code>SmallDuration</code> with a duration 1 millisecond.\nA <code>SmallDuration</code> with a duration 1 second.\nA duration of time with a <code>10 nanoseconds</code> sensitivity and a …\nA <code>SmallDuration</code> with a duration 0 seconds.\nReturns the number of microseconds (<code>10^-6 seconds</code>) this …\nReturns the number of milliseconds (<code>10^-3 seconds</code>) this …\nReturns the number of milliseconds this duration …\nReturns the number of nanoseconds (<code>10^-9 seconds</code>) this …\nReturns the number of seconds this duration represents …\nReturns the number of seconds this duration represents.\nReturns the number of tens of nanoseconds (<code>10^-8 seconds</code>) …\nReturns the argument unchanged.\nConverts the provided <code>Frequency</code> into a <code>SmallDuration</code>.\nReturns a <code>SmallDuration</code> with a duration of the provided …\nReturns a <code>SmallDuration</code> with a duration of the provided …\nReturns a <code>SmallDuration</code> with a duration of the provided …\nReturns a <code>SmallDuration</code> with a duration of the provided …\nReturns a <code>SmallDuration</code> with a duration of the provided …\nCalls <code>U::from(self)</code>.\nA frequency value with a <code>1Hz</code> sensitivity and a range of …\nReturns the number of hertz this frequency represents.\nReturns the argument unchanged.\nConverts the provided <code>SmallDuration</code> into a <code>Frequency</code>.\nReturns a <code>Frequency</code> that represents the provided <code>hertz</code>.\nCalls <code>U::from(self)</code>.\nA temperature value.\nEquivalent of <code>0°C</code> in the Kelvin scale.\nReturns the value of <code>Self</code> in degrees Celsius.\nReturns the value of <code>Self</code> in Kelvin.\nReturns the argument unchanged.\nReturns a <code>Temperature</code> of the provided <code>degrees</code> celsius.\nReturns a <code>Temperature</code> of the provided <code>kelvin</code>.\nCalls <code>U::from(self)</code>.")