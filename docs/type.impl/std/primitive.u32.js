(function() {
    var type_impls = Object.fromEntries([["firmware_core",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GCodeParameterValue-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/firmware_core/printer/components/g_code/parameters/value.rs.html#66\">Source</a><a href=\"#impl-GCodeParameterValue-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"firmware_core/printer/components/g_code/parameters/value/trait.GCodeParameterValue.html\" title=\"trait firmware_core::printer::components::g_code::parameters::value::GCodeParameterValue\">GCodeParameterValue</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/firmware_core/printer/components/g_code/parameters/value.rs.html#66\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"firmware_core/printer/components/g_code/parameters/value/trait.GCodeParameterValue.html#tymethod.from_str\" class=\"fn\">from_str</a>(string: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, _: <a class=\"enum\" href=\"firmware_core/utils/measurement/distance/enum.Units.html\" title=\"enum firmware_core::utils::measurement::distance::Units\">Units</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></div></details>","GCodeParameterValue","firmware_core::printer::components::motion::planner::block::StepsPerSecond"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NumberExt-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/firmware_core/utils/math/number_ext.rs.html#60\">Source</a><a href=\"#impl-NumberExt-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"firmware_core/utils/math/trait.NumberExt.html\" title=\"trait firmware_core::utils::math::NumberExt\">NumberExt</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/firmware_core/utils/math/number_ext.rs.html#60\">Source</a><a href=\"#method.sqr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"firmware_core/utils/math/trait.NumberExt.html#tymethod.sqr\" class=\"fn\">sqr</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns the square of self (<code>self * self</code>).</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>firmware_core::utils::math::NumberExt;  <span class=\"comment\">// You need to import this trait!\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">4</span>.sqr(), <span class=\"number\">4 </span>* <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13</span>.sqr(), <span class=\"number\">13 </span>* <span class=\"number\">13</span>);</code></pre></div>\n</div></details><section id=\"method.ceil_div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/firmware_core/utils/math/number_ext.rs.html#60\">Source</a><a href=\"#method.ceil_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"firmware_core/utils/math/trait.NumberExt.html#tymethod.ceil_div\" class=\"fn\">ceil_div</a>(&amp;self, other: Self) -&gt; Self</h4></section></div></details>","NumberExt","firmware_core::printer::components::motion::planner::block::StepsPerSecond"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[4140]}